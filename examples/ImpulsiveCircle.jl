using WaterLily,StaticArrays,CUDA,BiotSavartBCs
function circ(D,m;Re=550,U=1,shift=0,makeSim=BiotSimulation,kwargs...)
    body = AutoBody((x,t)->hypot(x[1]-m÷2,x[2]-m÷2-shift)-D÷2)
    makeSim((2m,m), (U,0), D; body, ν=U*D/Re, kwargs...)
end

using Plots,TypedTables
function update_Ix!(sim,t₀)
    sim_step!(sim,t₀;remeasure=false)
    ωy = sim.flow.σ
    @inside ωy[I] = WaterLily.curl(3,I,sim.flow.u)*WaterLily.loc(2,I)[2]
    (t=sim_time(sim),Ix=sum(ωy[inside(ωy)])/sim.L^2)
end
with_drag(data) = map(2:length(data)-1) do i
    (t=data.t[i],Ix=data.Ix[i],Cd=-2*(data.Ix[i+1]-data.Ix[i-1])/(data.t[i+1]-data.t[i-1]))
end |> Table

# Published data
Gillis = hcat([[0.04311073541842814, 1.3588445839874406],
          [0.06339814032121693, 1.1211245018717544],
          [0.11411665257819092, 0.9245385822968241],
          [0.3237531699070164, 0.7164786861490161],
          [0.5807269653423499, 0.8089766936360349],
          [0.7633136094674544, 0.9483530974519988],
          [1.0304311073541839, 1.1585624924526021],
          [1.4666103127641579, 1.301295012679628],
          [1.926458157227387, 1.2337350561526386],
          [2.376162299239221, 1.1513208549692062],
          [2.8901098901098896, 1.0826025842289577],
          [3.3770076077768367, 1.0321777563096242],
          [3.867286559594252, 0.997751962323391],
          [4.310228233305155, 0.970196836130902],
          [4.8072696534235, 0.9437691100108682],
          [5.206255283178354, 0.9253693998309381],
          [5.598478444632289, 0.9092573360705228]]...)

Billuard = hcat([[0.03296703296703285, 1.6285617679024265],
            [0.0397295012679626, 1.5782741214829121],
            [0.04696534234995742, 1.5234828477505395],
            [0.04696534234995742, 1.4645577683854603],
            [0.04696534234995742, 1.3898834826711746],
            [0.05994928148774292, 1.3027597729742781],
            [0.06813186813186811, 1.226700292235237],
            [0.07009298393913754, 1.1727683033450065],
            [0.07418427726120025, 1.121601420118343],
            [0.08378698224852066, 1.0805739145835849],
            [0.09748098055790377, 1.0109661924888298],
            [0.11979036348267114, 0.9434763898079943],
            [0.15530008453085342, 0.8436239584591234],
            [0.1853592561284867, 0.797059179648191],
            [0.2392561284868977, 0.7432045424465646],
            [0.3310829341598571, 0.7158899252639914],
            [0.4308368554522397, 0.7287680908102889],
            [0.5241009539910635, 0.7656834847413184],
            [0.5699408284023666, 0.7939992039608745],
            [0.6387827557058321, 0.8359788817775632],
            [0.6818258664412511, 0.8699782844261965],
            [0.7261200338123412, 0.9023380099021857],
            [0.7717497886728646, 0.9409392585436541],
            [0.8303634826711739, 0.9872482260596547],
            [0.895824175824175, 1.0397780944330395],
            [0.9497210481825857, 1.08207812389808],
            [1.024784446322907, 1.1455298200700397],
            [1.1279797125950952, 1.2049841452320564],
            [1.231167465013618, 1.2546397423821596],
            [1.3252022702572144, 1.2848162313040175],
            [1.425731191885037, 1.299430978142736],
            [1.5188081149619599, 1.3032072418789997],
            [1.5771090448013512, 1.3023262987561885],
            [1.7380332488024783, 1.2815184156502832],
            [1.826677937447167, 1.263157850501147],
            [1.9130496853573762, 1.2417109506366646],
            [2.0148774302620445, 1.2144640792174854],
            [2.2047134404057465, 1.1816715546431587],
            [2.3779797125950957, 1.1561003357082476],
            [2.563110735418426, 1.126524583987441],
            [2.7398546069315284, 1.1023746571670086],
            [2.9222353714661393, 1.0803775325041256],
            [3.0970245139475887, 1.0609291800507183],
            [3.2831783601014353, 1.04174742180896],
            [3.495925612848688, 1.0239837797367466],
            [3.6851479289940805, 1.0097011447892763],
            [3.8623236592467345, 0.99606195172349],
            [4.104530853761616, 0.981194178239343],
            [4.321344040574807, 0.9720765173288249],
            [4.504202122663658, 0.961307129305371],
            [4.690583262890952, 0.9500767346938774],
            [4.875146050530663, 0.9405928913577264],
            [5.053344604113832, 0.9311692790725756],
            [5.224497041420115, 0.9256656164714405],
            [5.410650887573961, 0.9170481439439679],
            [5.605864026083803, 0.9073433891697],
            [5.795232459847841, 0.9009725492090326],
            [6.019746407438719, 0.8922814635913535]]...)

function small_time(t;Re=550, k=4√(t/Re))
    t₁ = 2.257 + k - 0.141k^2 + 0.031k^3
    t₂ = (8.996 - 41k + 143.8k^2 + 45.4k^3)*t^2
    t₃ = (20.848 - 314.08k - 1851.36k^2 - 194.8k^3)*t^4
    t₄ = (28.864 + 6.272k)*t^6
    return π/√(Re*t)*(t₁ + t₂ + t₃ + t₄)
end

# Generate present method's data
D,m_2,m_1 = 128,(4,5,6),(3,5,8,24)
@time biot = map(m_2) do m
    sim = circ(D,m*D÷2,shift=D÷8,mem=CUDA.CuArray)
    e = m==4 ? 5 : 6
    [update_Ix!(sim,t₀) for t₀ in 0:0.02:e] |>Table |> with_drag
end;
@time refl = map(m_1) do m
    sim = circ(D,m*D,mem=CUDA.CuArray,makeSim=Simulation)
    [update_Ix!(sim,t₀) for t₀ in 0:0.02:6] |>Table |> with_drag
end;

# Plot
begin
    scatter(koumoutsakos[1,:],koumoutsakos[2,:],label="Koumoutsakos and Leonard",m=(5, :square, :white, stroke(1, color)))
    scatter!(Gillis[1,:],Gillis[2,:],label="Gillis et al.",m=(5, :white, stroke(1, color)),c=:black,marker=:circle)
    plot!(collect(0:0.01:0.35),small_time.(0:0.01:0.35),ls=:dash,c=:black,label="Theoretical curve")
    bmap = palette(:Blues,5)
    for (m,dat) in zip(m_2,biot)
        m2 = m/2
        mod(m2,1)==0 && (m2 = Int(m2))
        plot!(dat.t,dat.Cd,c=bmap[m-2],label="Present, D/W=1/$m2")
    end
    rmap = palette(:Reds,6)
    for (i,m,dat) in zip(1:4,m_1,refl)
        plot!(dat.t,dat.Cd,c=rmap[i+1],ls=:dashdot,label="Reflection, D/W=1/$m")
    end
end; plot!(dpi=300,ylabel="Drag coefficient",xlabel="convective time",ylims=(0,1.6),legend=:bottomright)
savefig("ImpCircle_Cd.png")

# Flow plot
using Measures,Plots,PyPlot
D=128
sim = circ(D,2*D);sim_step!(sim,4,remeasure=false);
ω = sim.flow.σ
@inside ω[I] = WaterLily.curl(3,I,sim.flow.u)*sim.L/sim.U
pyplot(dpi=300)
contourf(clamp.(ω[inside(ω)],-6,6)';aspect_ratio=:equal,
    framestyle=:box,axis=nothing,
    cbar=:top,c=:RdBu,clims=(-6,6),lw=0,levels=(union(-6:-1,1:6)))
savefig("ImpCircle_4_vort.png")
